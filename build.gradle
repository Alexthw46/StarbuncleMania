buildscript {
    repositories {
        maven { url 'https://files.minecraftforge.net/maven' }
        mavenCentral()
        maven { url 'https://modmaven.dev/' }
        maven {
            name "Sponge"
            url "https://repo.spongepowered.org/repository/maven-public/"
        }

        mavenLocal()
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
        classpath 'org.parchmentmc:librarian:1.+'
    }

}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'


version = "${mc_version}-${mod_version}"
group = 'com.hollingsworth.starbunclemania' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'starbunclemania'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
minecraft {

    mappings channel: 'parchment', version: '2023.07.02-1.20.1'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=starbunclemania.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                starbunclemania {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=starbunclemania.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                starbunclemania {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg "-mixin.config=starbunclemania.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'starbunclemania', '--all', '--output', file('src/generated/resources/'), "--existing", file('src/main/resources/')

            mods {
                starbunclemania {
                    source sourceSets.main
                }
            }
        }
    }
}
// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }
repositories {
    flatDir {
        dirs 'externalmods'
    }
    maven { url 'https://jitpack.io' }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        url "https://maven.blamejared.com"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url "https://maven.tterrag.com/"
        content {
            includeGroup "com.simibubi.create"
            includeGroup "com.jozufozu.flywheel"
        }
    }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    mavenCentral()
    mavenLocal()
}
dependencies {

    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementation fg.deobf("com.hollingsworth.ars_nouveau:ars_nouveau-${mc_version}:${ars_version}")
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${mc_version}:${gecko_version}")

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    // at runtime, use the full JEI
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-common:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    //implementation fg.deobf("top.theillusivec4.curios:curios-forge:${mc_version}-${curio_version}")
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curio_version}")

    implementation fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-${patchouli_version}")
    implementation /*compileOnly*/ fg.deobf("com.github.glitchfiend:TerraBlender-forge:1.20.1-3.0.0.165")


    compileOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")// core
    /*
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:additions")// Mekanism: Additions
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:generators")// Mekanism: Generators
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:tools")// Mekanism: Tools


    runtimeOnly fg.deobf("curse.maven:immersiveng-231951:4193176")  // Immersive engineering
    runtimeOnly fg.deobf("curse.maven:titanium-287342:4484497") // Titanium
    runtimeOnly fg.deobf("curse.maven:functional-storage-556861:4324174") // Functional Storage
    runtimeOnly fg.deobf("curse.maven:pnc-281849:4371201") // Pneumaticcraft
    runtimeOnly fg.deobf("curse.maven:elemental-561470:4424442") // Ars Elemental
    runtimeOnly fg.deobf("curse.maven:ae2-223794:3995899") // Applied Energistics 2
    runtimeOnly fg.deobf("joefoxe:hexerei:0.3.2-all") // Hexerei
    implementation fg.deobf("com.simibubi.create:create-1.19.2:0.5.0.f-15:slim"){ transitive = false }
    runtimeOnly fg.deobf("com.jozufozu.flywheel:flywheel-forge-1.19.2:0.6.7-9")
     */


    implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:0.2.0-beta.8"))
    implementation("com.github.llamalad7.mixinextras:mixinextras-forge:0.2.0-beta.8")

    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "starbunclemania.refmap.json"
}


// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "StarbuncleMania",
                "Specification-Vendor": "alexthw",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"alexthw",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}


// Prevent Mixin annotation processor from getting into IDEA's annotation processor settings
// Copied from Botania
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).configureEach {
            it.options.annotationProcessorPath = files()
        }
    }
}